MVC(核心-->解耦，强制性的使应用程序的输入，处理和输出分开，减低各个模块之间的耦合性，方便变更，更容易重构代码，最大程度地实现了代码的重用): 
    Model --> 进行业务逻辑判断，数据库存取（数据存取层，主要负责数据库的CRUD）

    View --> 根据业务逻辑选择不同的视图（表现层）

    Controller--> 将用户输入的指令和数据传递给业务模型（业务逻辑层，主要负责业务逻辑的处理）

MVT(严格来说，Django的模式应该是MVT模式):
    Model --> 负责业务与数据库（ORM）对象（主要负责数据库的CRUD）

    View --> 负责业务逻辑并适当调用Model和Template（主要负责业务逻辑的处理）

    Template --> 负责把页面渲染展示给用户

注意:Django中还有一个url分发器，也叫作路由。主要用于将url请求发送给不同的View 处理，View在进行相关的业务逻辑处理
    

pip install virtualenv:安装virtualenv(虚拟环境)

virtualenv --no-site-packages -p xxx 文件名: 安装env环境。xxx --> 指定python版本所在的路径
virtualenv --no-site-packages 文件名:安装env环境。使用默认版本的python解释器

--no-site-packages:纯净的虚拟环境，不包括外界的包/模块

windows:
cd 环境名/Script --> activate | deactivate 进入|退出env
Linux:
source bin/activate 进入
source deactivate 退出

pip install django==1.11:安装django环境


django-admin startproject 项目名:创建django项目
python manage.py runserver [ip:](默认127.0.0.1)端口号(默认8000端口):启动django项目，端口号可以不用写，启动的时候会默认随机创建一个可以使用的端口
python manage.py startapp hello_app:创建app。该命令是在工程下创建一个名为hello_app的app

app:
    __init__.py:初始化，配置pymysql链接的地方
    setting.py:配置信息位置，databases等
    urls.py:url路由，给每个请求寻找对应的方法
    wsgi.py:网关
    admin.py:管理后台注册模型
    apps.py:settings.py里面注册app的时候需要适用到，一般不推荐这样使用
    models.py:写模型的地方
    views.py:写处理业务逻辑的地方

配置:
1、settings.py文件中INSTALLED_APPS中写入创建的app的name
2、也可以导入apps.py文件中的APPCONFIG下的name属性

模型
在models.py文件中定义class模型名称
继承models.Model
db_tables:定义数据库中的表名称

迁移
python manage.py makemigrations
python manage.py migrate

保持数据
stu = Student()
stu.name = "xxxx"
stu.save()

创建超级管理员的帐号和密码
python manage.py createsuperuser

path:查看PATH路径中的内容

创建pycharm项目时需要指定虚拟环境，可以将不同版本的项目隔离开来
项目上线时要将环境和项目分离开

alt + enter:提示当前应用的函数所需要导入的包

-----------------------------------------------
ORM(objects relational mapping):对象关系映射，翻译机

模型字段
    CharField:字符串
	    max_length:长度
	模型参数:
	    default='xxx':设置默认值
            null=True: 设置是否为空，针对数据库中该字段是否可以为空
            blank=True:设置是否为空，针对表单提交中该字段是否可以为空
            primary_key=True:创建主键
            unique:唯一
	    
    IntegerField:整数
    FloatField:浮点数
    BooleanField:布尔类型(1,0)
    DateField(auto_now_add=True/auto_now):存放日期（年月日）                     	auto_now_add=True:第一次创建数据时设置时间(1次) 
        auto_now=True:每次登录、修改操作都会更新到最新时间(多次)
    DateTimeField:年月日  时分秒
	auto_now_add
	auto_now

AutoField:自动增长
DecimalField:
    models.DecimalField(max_digits=3,decimal_places=1) 最大值99.9
    max_digits:总位数
    decimal_places:小数点后的位数

TextField:存长文本信息，页面等
FileField:文件上传字段
ImageField(upload_to=''):上传图片
    upload_to="":指定上传图片的路径

--------------------------- django过滤 ------------------------------------
1、修改字段名
alter table table_name change 原名称  修改后名称 类型

2、objects对象
通过模型.objects来实现数据的增删查改(CRUD)操作

3、获取所有学生信息
select * from stu
模型.objects.all()

4、获取所有女生的信息
select * from stu where stu_sex=False
模型.objects.filter(stu_sex=False)
模型.objects.get(stu_sex=False)(不推荐使用)


filter():返回满足条件的结果
first():返回第一条数据
last():返回最后一条数据
count():求和

gt gte: 大于  大于等于
lt lte: 小于  小于等于

5、F()/ Q()
from django.db.models import F,Q

